@page "/users/add"
@page "/users/edit/{UserId:guid}"


<h3>@PageTitle</h3>

<EditForm Model="@userModel" OnValidSubmit="EditOrUpdate">
    <DataAnnotationsValidator />

    <div class="form-row">
        <div class="form-group col-md-6">
            <label>First Name</label>
            <InputText @bind-Value="@userModel.FirstName" class="form-control" />
            <ValidationMessage For="() => userModel.FirstName" />
        </div>
        <div class="form-group col-md-6">
            <label>Last Name</label>
            <InputText @bind-Value="@userModel.LastName" class="form-control" />
            <ValidationMessage For="() => userModel.LastName" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label>Email Address</label>
            <InputText @bind-Value="@userModel.EmailAddress" class="form-control" />
            <ValidationMessage For="() => userModel.EmailAddress " />
        </div>
        <div class="form-group col-md-6">
            <label>Password</label>
            <InputText @bind-Value="@userModel.Password" class="form-control" type="password" />
            <ValidationMessage For="() => userModel.Password" />
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <div class="form-check">
                <InputCheckbox @bind-Value="userModel.IsActive" class="form-check-input" id="chUserStatus" />
                <label for="chUserStatus" class="form-check-label">User Status</label>
            </div>
        </div>
    </div>

    <div class="form-group">
        <SaveButtonComponent Caption="Save" />
        <CancelButtonComponent OnClick="GoBackUserList" />
    </div>


</EditForm>


@code {
    [Parameter]
    public Guid? UserId { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    [Inject]
    public ModalManager ModalManager { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private UserDto userModel = new UserDto();

    private string PageTitle = "Create User";

    protected override async Task OnInitializedAsync()
    {
        if (UserId != null && UserId != Guid.Empty)
        {
            try
            {
                PageTitle = "Edit User";

                userModel = await HttpClient.GetServiceResponseAsync<UserDto>("api/User/UserById/" + UserId, true);
            }
            catch (ApiException exception)
            {
                await ModalManager.ShowMessageAsync("Api Exception", exception.Message);
            }
            catch (Exception exception)
            {
                await ModalManager.ShowMessageAsync("Exception", exception.Message);
            }
        }
    }

    async Task EditOrUpdate()
    {
        try
        {
            string url = "api/User/Create";

            if (UserId != null && UserId != Guid.Empty)
            {
                url = "api/User/Update";
            }

            var test = 10;

            userModel = await HttpClient.PostGetServiceResponseAsync<UserDto, UserDto>(url, userModel, true);

            NavigationManager.NavigateTo("/userlist");
        }
        catch (ApiException exception)
        {
            await ModalManager.ShowMessageAsync("Api Exception", exception.Message);
        }
        catch (Exception exception)
        {
            await ModalManager.ShowMessageAsync("Exception", exception.Message);
        }
    }

    void GoBackUserList()
    {
        NavigationManager.NavigateTo("/userlist");
    }
}
